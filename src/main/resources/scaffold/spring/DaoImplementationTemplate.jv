package @{topLevelPackage}.repo;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import @{entity.getQualifiedName()};

@foreach{clazz : qbeMetawidgetImports}
import @{clazz};
@end{}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Repository
@Transactional
public class @{entity.getName()}DaoImpl implements @{entity.getName()}Dao
{
	@Autowired
	private EntityManager entityManager;

	@SuppressWarnings("unchecked")
	public List<@{entity.getName()}> getAll()
	{
		Query query = entityManager.createQuery("select e from " + "@{entity.getName()}" + " e");
		List<@{entity.getName()}> entities = query.getResultList();
		return entities;
	}
	
	public @{entity.getName()} getById(Long id)
	{
		return entityManager.find(@{entity.getName()}.class, id);
	}
	
	public void update(@{entity.getName()} entity)
	{
		entityManager.merge(entity);
	}

	public void create(@{entity.getName()} entity)
	{
		entityManager.persist(entity);
	}
	
	public void delete(Long id)
	{
		entityManager.remove(entityManager.find(@{entity.getName()}.class, id));
	}
	
	public List<@{entity.getName()}> search(@{entity.getName()} search, Long first, Integer maxItems)
	{
		CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();

		// Create and populate a query for the search

		CriteriaQuery<@{entity.getName()}> criteria = builder.createQuery(@{entity.getName()}.class);
		Root<@{entity.getName()}> root = criteria.from(@{entity.getName()}.class);
		TypedQuery<@{entity.getName()}> query = this.entityManager.createQuery(criteria.select(root).where(getSearchPredicates(root, search)));
		query.setFirstResult(first.intValue()).setMaxResults(maxItems);

		return query.getResultList();
	}

	public Long getCount(@{entity.getName()} search)
	{
		CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();

		// Create and populate a query for the number of entities in the database

		CriteriaQuery<Long> countCriteria = builder.createQuery(Long.class);
		Root<@{entity.getName()}> root = countCriteria.from(@{entity.getName()}.class);
		countCriteria = countCriteria.select(builder.count(root)).where(getSearchPredicates(root, search));

		return this.entityManager.createQuery(countCriteria).getSingleResult();
	}

	private Predicate[] getSearchPredicates(Root<@{entity.getName()}> root, @{entity.getName()} search)
	{
		CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();
		List<Predicate> predicatesList = new ArrayList<Predicate>();

		@{qbeMetawidget}

		return predicatesList.toArray(new Predicate[predicatesList.size()]);
	}
}